/******************************************************************************
* @ File: Multi_master_receive_revised.ino
* @ Author: Team Electronauts
* @ Institution: Texas State University
* @ Date: 10/23/2023
* @ Description: This program is made to be uploaded to an ESP32 dev module.
* It receives data from multiple ESP32 masters and calculates distance,
* azimuth angle, and observer angle for each object detected.
* 
*******************************************************************************/
#include "hub.h"

/*************************************************************************
* callback function when data is received by master
*
* This takes the packet of data received and checks to see where it came 
* from. Then it saves it to it's respective variable array
**************************************************************************/
void OnDataRecv(const uint8_t *mac_addr, const uint8_t *data, int data_len) {
  //mac address will be stored in macStr[18]
  //char macStr[18];

  //save sender mac address
  //Serial.print("\nLast Packet Recv from: ");
  //snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
  //         mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  //Serial.println(macStr);

  //copy data into message
  memcpy(&message, data, sizeof(message));  //data and message should be the same data type

  //all 4 indexes have same camera ID so just grab the first one
  // Serial.printf("\nPacket received from Camera ID: %d", message[0].cam_id);

  uint8_t camera_ID = message[0].cam_id;
  //Serial.println(camera_ID);
  // Serial.println(message[0].x[0]);
  // Serial.println(message[0].y[0]);
  // Serial.println("");

  //iterate through all patches
  for (uint8_t patch = 0; patch < NUM_PATCHES; patch++) {
    // if patch is detected
    if (message[patch].isDetected == true) {
      // total arrays will add up the x, y, and angle values to be averaged later
      x_total[camera_ID - 1][patch] += ((message[patch].x[0] + message[patch].x[1]) / 2);
      y_total[camera_ID - 1][patch] += ((message[patch].y[0] + message[patch].y[1]) / 2);
      angle_total[camera_ID - 1][patch] += ((message[patch].angle[0] + message[patch].angle[1]) / 2);

      // increment the count value for each value added into total
      count[camera_ID - 1][patch] += 1;
      // record the last camera that detected this certain patch
      p_array[patch].last_detected = message[patch].cam_id;
    }
  }

  //determine where to save data based on camera ID
  switch (message[0].cam_id) {
    case 1:
      memcpy(&cam1, data, sizeof(cam1));
      break;
    case 2:
      memcpy(&cam2, data, sizeof(cam2));
      break;
    case 3:
      memcpy(&cam3, data, sizeof(cam3));
      break;
    default:
      break;
  }
}

/*************************************************************************
* Store values for each person
* 
* Takes in person identification and their respective location, and 
* direction as input and stores that data 
*
* parameters: 
* p: 0-3 people signifier, person P distance, azimuth, and observer values 
**************************************************************************/
void store_values(int p, int distance, int azimuth, int observer) {
  uint16_t percent_diff[3] = {0,0,0};
  uint16_t value_diff[3] = {0,0,0};
  bool store_sig[3] = {0,0,0};

  value_diff[0] = abs(distance - last_distance);
  value_diff[1] = abs(azimuth - last_distance);
  value_diff[2] = abs(observer - last_distance);

  percent_diff[0] = value_diff[0] / 275; // distance max value is 275, rather than 360

  for(int i = 1; i < 3; i++){
    if (value_diff[i] > 180) {
      percent_diff[i] = (360 - value_diff[i]) / 360;
    } else {
        percent_diff[i] = value_diff[i] / 360;
      }
  }
  for(int i = 0; i < 3; i++){
    if (percent_diff[i] < 0.03 && (count[0][p] > 0 || count[1][p] > 0 || count[2][p] > 0)) {
    store_sig[i] = true;
    }
  }
  if(store_sig[0]){
    p_array[p].distance = distance;
    last_distance = distance;  
  }
  if(store_sig[1]){
    p_array[p].azimuth = azimuth;
    last_azimuth = azimuth;
    }
  if(store_sig[1]){
    p_array[p].observer = observer;
    last_observer = observer;
    }
  return;
}

/*************************************************************************
* Calculate Distance for each person/patch based on y-value
* 
* Takes in person/patch number as input and based on which camera last 
* detected that person/patch, calculate using that camera's data
*
* parameters: 
*   p: ranges from 0 to 3 for each patch/person 
**************************************************************************/
int calculate_distance(int p) {
  // Serial.println("CALCULATE DISTANCE");
  int y_val = 0;
  /* LD is the camera id that last detected the patch, p */
  uint8_t LD = p_array[p].last_detected;
  uint16_t distance = 0;

  if(count[LD-1][p] > 0){
    y_val = (y_total[LD - 1][p] / count[LD - 1][p]);
  }
   // else{break;}
  //top of the frame (furthest)
  if ((y_val > 0) && (y_val <= 20)) {
    distance = 275;
  }
  //if between 20 and 120
    else if ((y_val > 20) && (y_val <= 120)) {
      distance = -1.326 * y_val + 324.29;
    }
  //if between 120 and 190
  else if ((y_val > 120) && (y_val <= 190)) {
    distance = -.7963 * y_val + 241.74;
  }
  //bottom of the frame (closest)
  else if (y_val > 190) {
    distance = 68;  //68cm from the center point of the circle area
  }
  return(distance);
}

/*************************************************************************
* Calculate Azimuth angle based on x-value from pixy cameras
* 
* Takes in camera ID as an input and determines the azimuth angle of each 
* person in that cameras struct array
* 
**************************************************************************/
int calculate_azimuth(int p) {
  // Serial.println("CALCULATE AZIMUTH");
  uint8_t LD = p_array[p].last_detected;
  uint16_t x_val = 0;
  uint16_t azimuth = 0;
  
  if (count[LD - 1][p] > 0) {
    x_val = (x_total[LD - 1][p] / count[LD - 1][p]);
  }// else {return;}
  if(count[LD-1][p] > 0){
    switch (LD) {
      case 1: //cam1 
        azimuth = -0.32 * x_val + 100;
        break;
      case 2: //cam 2 values are non linear, thus require 2 models
        if(/*x_val > 45 &&*/ x_val < 140 ){
          //cam2 left hand side
          azimuth = -0.32 * x_val + 45;
              if(azimuth < 0){
                azimuth = abs(azimuth);
              }
          }
            else if(x_val > 140 && x_val < 150){
              azimuth = 355;
            }
              else if(x_val > 150 /*&& x_val < 245*/){
                //cam2 right hand side
                azimuth = -0.32 * x_val + 410;
                  if(azimuth > 360){
                    azimuth = 360 - (360 - azimuth);
                  }
              }
        break;
        case 3: //cam3 
          azimuth = -0.32 * x_val + 360;
          break;
        default:
          break;
          }  
  }
  return(azimuth);
}

/*************************************************************************
* Calculate observer angle based on angle from pixy cameras
* 
* Takes in camera ID as an input and determines the azimuth angle of each 
* person in that cameras struct array
**************************************************************************/
int calculate_observer(int p) {
  // Serial.println("CALCULATE OBSERVER");
  uint8_t LD = p_array[p].last_detected;
  uint16_t observer = 0;
  uint16_t percent_diff = 0;

  if (count[LD - 1][p] > 0) {
    observer = (angle_total[LD - 1][p] / count[LD - 1][p]);
  } //else {return;}
  switch (LD) {
    case 1:
      if ((observer + 60) > 360) {
        observer = 420 - (observer + 60);
      } else {
        observer += 60;
      }
      break;
    case 2:
      break;
    case 3:
      if ((observer - 60) < 0) {
        observer = 360 + (observer - 60);
      } else {
        observer -= 60;
      }
      break;
    default:
      return(last_observer);
      //p_array[p].observer = last_observer;
      break;
  }
  return(observer);
}


/*************************************************************************
* Calculate distance,azimuith,observer if a person is seen by multiple cameras
* 
* Takes in person identification as an input and determines the azimuth angle of each 
* person in that cameras struct array

**************************************************************************/

int Multi_cam(int p, int a) {
  uint16_t x_val[3] = {0,0,0}; // index represents # of cameras
  uint16_t y_val[3] = {0,0,0};
  uint16_t angle_val[3] = {0,0,0};
  uint8_t LD = p_array[p].last_detected;
  uint16_t azimuth_M = 0;
  uint16_t distance_M = 0;
  uint16_t observer_M = 0;
  uint16_t y_val_M = 0;

  for(int i =0 ; i < 3; i++){
    if(count[i][p] > 0){
      x_val[i] = (x_total[i][p] / count[i][p]);
      y_val[i] = (y_total[i][p] / count[i][p]);
      angle_val[i] = (angle_total[i][p] / count[i][p]);
    }
  }
//camera y value setup
  if(y_val[0] > 0 && y_val[1] == 0 && y_val[2] == 0){
    y_val_M = y_val[0];
  }
    else if(y_val[1] > 0 && y_val[0] == 0 && y_val[2] == 0){
      y_val_M = y_val[1];
    }
      else if(y_val[2] > 0 && y_val[0] == 0 && y_val[1] == 0){
        y_val_M = y_val[2];  
      }
        else if(y_val[0] > 0 && y_val[1] > 0){
          if(x_val[1] < 140 && x_val[1] > 0){
            y_val_M = y_val[0];
          }
            else{ y_val_M = y_val[1]; 
            }
        } 
          else if(y_val[1] > 0 && y_val[2] > 0){
            if(x_val[1] > 160){
              y_val_M = y_val[2];
            }
              else{ y_val_M = y_val[1]; 
              }
          }   
 //distance calculations
  if ((y_val_M > 0) && (y_val_M <= 20)) {
    distance_M = 275;
  }
    else if ((y_val_M > 20) && (y_val_M <= 120)) {
      distance_M = -1.326 * y_val_M + 324.29;
    }
      else if ((y_val_M > 120) && (y_val_M <= 190)) {
        distance_M = -.7963 * y_val_M + 241.74;
      }
        else if (y_val_M > 190) {
          distance_M = 68; 
        }
//azimuth && observer angle calculations
  if(x_val[0] > 0 && x_val[1] == 0 && x_val[0] == 0){
    azimuth_M = -0.32 * x_val[0] + 100;
    if((angle_val[0] + 60) > 360){
      observer_M = 420 - (observer_M + 60);
      } else {
        observer_M += 60;
      }
  }
    else if(x_val[1] > 0){
      if(count[0][p] > 0){
        azimuth_M = -0.32 * x_val[1] + 45;
        if((angle_val[0] + 60) > 360){
          observer_M = 420 - (angle_val[0] + 60);
        } else {
            observer_M += 60;
          }
      }
        else if(count[2][p] > 0){
          azimuth_M = -0.32 * x_val[1] + 390;
           if ((angle_val[2] - 60) < 0) {
            observer_M = 360 + (angle_val[2] - 60);
           } else {
              observer_M -= 60;
            } 
        }
    }  
      else if(x_val[2] > 0  && x_val[0] == 0 && x_val[1] == 0){
        azimuth_M = -0.32 * x_val[2] + 330;
      }
  if(a == 0){
    return(distance_M);
  }
    else if(a == 1){
      return(azimuth_M);
    }
      else if(a == 2){
       return(observer_M); 
      }
}
////////////////////////////////////////
// SETUP
////////////////////////////////////////
void setup() {
  //Serial init
  Serial.begin(115200);
  Serial.println("----------BEGINNING SETUP-----------");
  //setup wifi mode as access point
  WiFi.mode(WIFI_AP);
  //configure the access point
  config_AP();
  //esp init
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESPNow Init Fail");
  }
  //register callback function
  esp_now_register_recv_cb(OnDataRecv);
/*
  if (!SD.begin(CS_PIN)) {
    Serial.println("Card Mount Failed");
  }
  uint8_t cardType = SD.cardType();
  if (cardType == CARD_NONE) {
    Serial.println("No SD card attached");
  }

  writeFile(SD, "/crew_data.csv", "Member,Distance,Azimuth,Observer\n");
*/
  //print out receiver mac address
  Serial.print("AP MAC: ");
  Serial.println(WiFi.softAPmacAddress());
  Serial.println("-------------END SETUP-----------");
}


//////////////////////////////////////
// LOOP
//////////////////////////////////////
/*************************************************************************
The loop takes input every 35ms averaged over one second, then stores those
values to then be printed for use with GUI via python
**************************************************************************/
void loop() {
  curr_time = millis();
  uint16_t distance = 0;
  uint16_t azimuth = 0;
  uint16_t observer = 0;

  //calculate data every second
  if (curr_time - prev_time >= 1000) {
    // Serial.println("1 second has passed. enter calculate location");

    //calculate location and physical orientation for all 4 crew members
    for (uint8_t p = 0; p < NUM_PATCHES; p++) {
      if((count[0][p] > 0 && count[1][p] > 0) || (count[1][p] > 0 && count[2][p] > 0)){
      multi_cam = true;
      }
        else{
          multi_cam = false;
        }
      if(!multi_cam){
        distance = calculate_distance(p);
        azimuth = calculate_azimuth(p);
        observer = calculate_observer(p);
      }
        else if(multi_cam){
            distance = Multi_cam(p,0);
            azimuth = Multi_cam(p,1);
            observer = Multi_cam(p,2); 
        }
    store_values(p,distance,azimuth,observer); 
    print_GUI_data();
    }

    // Serial.println("reset average values");
    reset_avg_values();
    //print_person_data();
    prev_time = millis();

    /* for (uint8_t patch = 0; patch < NUM_PATCHES; patch++) {
      sprintf(file_message, "%d,%d,%d,%d\n", patch + 1, p_array[patch].distance, p_array[patch].azimuth, p_array[patch].observer);
      appendFile(SD, "/crew_data.csv", file_message);
    } */
  }
}  //end loop